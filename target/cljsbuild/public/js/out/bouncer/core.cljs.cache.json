["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$bouncer.core","~:imports",null,"~:requires",["^ ","~$gstring","~$goog.string","^:","^:","~$goog.string.format","^;"],"~:uses",null,"~:defs",["^ ","~$wrap-chain",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/derektaylor/Documents/projects/sg-app/target/cljsbuild/public/js/out/bouncer/core.cljs","~:line",133,"~:column",8,"~:end-line",133,"~:end-column",18,"~:private",true,"~:arglists",["~#list",["~$quote",["^H",[["~$old-state","~$message-fn","~$&","~$fs"]]]]],"~:doc","Internal Use.\n\n  Chain of responsibility.\n\n  Takes the current state and a collection of validators `fs`\n\n  Will run all validators against `old-state` and eventually return a vector with the result - the errors map - and the new state - the original map augmented with the errors map.\n\n  See also `wrap`\n","~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",2,"~:method-params",[["^H",["^J","^K","^L"]]],"^G",["^H",[["^J","^K","~$&","^L"]]],"~:arglists-meta",["^H",[null]]]],"^F",true,"^5","~$bouncer.core/wrap-chain","^O",true,"^A","target/cljsbuild/public/js/out/bouncer/core.cljs","^E",18,"^N",["^ ","^O",true,"^P",2,"^Q",[["^H",["^J","^K","^L"]]],"^G",["^H",[["^J","^K","~$&","^L"]]],"^R",["^H",[null]]],"^Q",[["^H",["^J","^K","^L"]]],"~:protocol-impl",null,"^R",["^H",[null]],"^C",1,"^B",133,"^D",133,"^P",2,"~:fn-var",true,"^G",["^H",[["^J","^K","~$&","^L"]]],"^M","Internal Use.\n\n  Chain of responsibility.\n\n  Takes the current state and a collection of validators `fs`\n\n  Will run all validators against `old-state` and eventually return a vector with the result - the errors map - and the new state - the original map augmented with the errors map.\n\n  See also `wrap`\n"],"~$wrap",["^ ","^?",null,"^@",["^ ","^A","/Users/derektaylor/Documents/projects/sg-app/target/cljsbuild/public/js/out/bouncer/core.cljs","^B",85,"^C",8,"^D",85,"^E",12,"^F",true,"^G",["^H",["^I",["^H",[["^K","~$acc",["~$pred","~$k","~$&","~$args"]]]]]],"^M","Wraps pred in the context of validating a single value\n\n  - `acc`  is the map being validated\n\n  - `pred` is a validator\n\n  - `k`    the path to the value to be validated in the associative structure `acc`\n\n  - `args` any extra args to pred\n\n  It only runs pred if:\n\n  - the validator contains a pre-condition *and* it is met or;\n  - the validator is optional  *and* there is a non-nil value to be validated (this information is read from pred's metadata) or;\n  - there are no previous errors for the given path\n\n  Returns `acc` augmented with a namespace qualified ::errors keyword\n"],"^F",true,"^5","~$bouncer.core/wrap","^O",false,"^A","target/cljsbuild/public/js/out/bouncer/core.cljs","^E",12,"^Q",["^H",[["^K","^W","~$p__45802"]]],"^T",null,"^R",["^H",[null,null]],"^C",1,"^B",85,"^D",85,"^P",3,"^U",true,"^G",["^H",["^I",["^H",[["^K","^W",["^X","~$k","~$&","^Y"]]]]]],"^M","Wraps pred in the context of validating a single value\n\n  - `acc`  is the map being validated\n\n  - `pred` is a validator\n\n  - `k`    the path to the value to be validated in the associative structure `acc`\n\n  - `args` any extra args to pred\n\n  It only runs pred if:\n\n  - the validator contains a pre-condition *and* it is met or;\n  - the validator is optional  *and* there is a non-nil value to be validated (this information is read from pred's metadata) or;\n  - there are no previous errors for the given path\n\n  Returns `acc` augmented with a namespace qualified ::errors keyword\n"],"~$validate*",["^ ","^?",null,"^@",["^ ","^A","/Users/derektaylor/Documents/projects/sg-app/target/cljsbuild/public/js/out/bouncer/core.cljs","^B",150,"^C",8,"^D",150,"^E",17,"^F",true,"^G",["^H",["^I",["^H",[["^K","~$m","^L"]]]]],"^M","Internal use.\n\n  Validates the map m using the validation functions fs.\n\n  Returns a vector where the first element is the map of validation errors if any and the second is the original map (possibly) augmented with the errors map."],"^F",true,"^5","~$bouncer.core/validate*","^O",false,"^A","target/cljsbuild/public/js/out/bouncer/core.cljs","^E",17,"^Q",["^H",[["^K","~$m","^L"]]],"^T",null,"^R",["^H",[null,null]],"^C",1,"^B",150,"^D",150,"^P",3,"^U",true,"^G",["^H",["^I",["^H",[["^K","~$m","^L"]]]]],"^M","Internal use.\n\n  Validates the map m using the validation functions fs.\n\n  Returns a vector where the first element is the map of validation errors if any and the second is the original map (possibly) augmented with the errors map."],"~$valid?",["^ ","^?",null,"^@",["^ ","^A","/Users/derektaylor/Documents/projects/sg-app/target/cljsbuild/public/js/out/bouncer/core.cljs","^B",221,"^C",7,"^D",221,"^E",13,"^G",["^H",["^I",["^H",[["~$&","^Y"]]]]],"^M","Takes a map and one or more validation functions with semantics provided by \"validate\". Returns true if the map passes all validations. False otherwise.","^N",["^ ","^O",true,"^P",0,"^Q",[["^H",["^Y"]]],"^G",["^H",[["~$&","^Y"]]],"^R",["^H",[null]]]],"^5","~$bouncer.core/valid?","^O",true,"^A","target/cljsbuild/public/js/out/bouncer/core.cljs","^E",13,"^N",["^ ","^O",true,"^P",0,"^Q",[["^H",["^Y"]]],"^G",["^H",[["~$&","^Y"]]],"^R",["^H",[null]]],"^Q",[["^H",["^Y"]]],"^T",null,"^R",["^H",[null]],"^C",1,"^B",221,"^D",221,"^P",0,"^U",true,"^G",["^H",[["~$&","^Y"]]],"^M","Takes a map and one or more validation functions with semantics provided by \"validate\". Returns true if the map passes all validations. False otherwise."],"~$validate",["^ ","^?",null,"^@",["^ ","^A","/Users/derektaylor/Documents/projects/sg-app/target/cljsbuild/public/js/out/bouncer/core.cljs","^B",178,"^C",7,"^D",178,"^E",15,"^G",["^H",["^I",["^H",[["~$&","^Y"]]]]],"^M","Takes a\n\n  - `message-fn` (optional) responsible for transforming error metadata into\n  the validation result (defaults to `with-default-messages`)\n\n  - `m` map to be validated\n\n  - `forms` validations to be performed on the map\n\n  forms can be a single validator set or a sequence of key/value pairs where:\n\n  key   ==> :keyword or [:a :path]\n\n  value ==> validation-function or\n            validator-set or\n           [[validation-function args+opts]] or\n           [validation-function another-validation-function] or\n           [validation-function [another-validation-function args+opts]]\n\n  e.g.:\n\n\n      (core/validate a-map\n               :name v/required\n               :age  [v/required\n                     [v/number :message \"age must be a number\"]]\n               [:passport :number] v/positive)\n\n\n  Returns a vector where the first element is the map of validation errors if\n  any and the second is the original map (possibly) augmented with the errors\n  map.\n\n  See also `defvalidator`\n","^N",["^ ","^O",true,"^P",0,"^Q",[["^H",["^Y"]]],"^G",["^H",[["~$&","^Y"]]],"^R",["^H",[null]]]],"^5","~$bouncer.core/validate","^O",true,"^A","target/cljsbuild/public/js/out/bouncer/core.cljs","^E",15,"^N",["^ ","^O",true,"^P",0,"^Q",[["^H",["^Y"]]],"^G",["^H",[["~$&","^Y"]]],"^R",["^H",[null]]],"^Q",[["^H",["^Y"]]],"^T",null,"^R",["^H",[null]],"^C",1,"^B",178,"^D",178,"^P",0,"^U",true,"^G",["^H",[["~$&","^Y"]]],"^M","Takes a\n\n  - `message-fn` (optional) responsible for transforming error metadata into\n  the validation result (defaults to `with-default-messages`)\n\n  - `m` map to be validated\n\n  - `forms` validations to be performed on the map\n\n  forms can be a single validator set or a sequence of key/value pairs where:\n\n  key   ==> :keyword or [:a :path]\n\n  value ==> validation-function or\n            validator-set or\n           [[validation-function args+opts]] or\n           [validation-function another-validation-function] or\n           [validation-function [another-validation-function args+opts]]\n\n  e.g.:\n\n\n      (core/validate a-map\n               :name v/required\n               :age  [v/required\n                     [v/number :message \"age must be a number\"]]\n               [:passport :number] v/positive)\n\n\n  Returns a vector where the first element is the map of validation errors if\n  any and the second is the original map (possibly) augmented with the errors\n  map.\n\n  See also `defvalidator`\n"],"~$build-multi-step",["^ ","^?",null,"^@",["^ ","^A","/Users/derektaylor/Documents/projects/sg-app/target/cljsbuild/public/js/out/bouncer/core.cljs","^B",24,"^C",8,"^D",24,"^E",24,"^F",true,"^G",["^H",["^I",["^H",[["~$key-or-vec","~$fn-vec"],["^17",["~$f-or-list","~$&","~$rest"],"^W"]]]]],"^N",["^ ","^O",false,"^P",3,"^Q",["^H",[["^17","^18"],["^17",["^19","~$&","^1:"],"^W"]]],"^G",["^H",[["^17","^18"],["^17",["^19","~$&","^1:"],"^W"]]],"^R",["^H",[null,null]]]],"^F",true,"^5","~$bouncer.core/build-multi-step","^O",false,"^A","target/cljsbuild/public/js/out/bouncer/core.cljs","^E",24,"^N",["^ ","^O",false,"^P",3,"^Q",["^H",[["^17","^18"],["^17",["^19","~$&","^1:"],"^W"]]],"^G",["^H",[["^17","^18"],["^17",["^19","~$&","^1:"],"^W"]]],"^R",["^H",[null,null]]],"^Q",["^H",[["^17","^18"],["^17",["^19","~$&","^1:"],"^W"]]],"^T",null,"^R",["^H",[null,null]],"^C",1,"^B",24,"^D",24,"^P",3,"^U",true,"^G",["^H",[["^17","^18"],["^17",["^19","~$&","^1:"],"^W"]]]],"~$build-steps",["^ ","^?",null,"^@",["^ ","^A","/Users/derektaylor/Documents/projects/sg-app/target/cljsbuild/public/js/out/bouncer/core.cljs","^B",64,"^C",8,"^D",64,"^E",19,"^F",true,"^G",["^H",["^I",["^H",[[["~$head","~$&","~$tail","~:as","~$forms"]]]]]]],"^F",true,"^5","~$bouncer.core/build-steps","^O",false,"^A","target/cljsbuild/public/js/out/bouncer/core.cljs","^E",19,"^Q",["^H",[["~$p__45786"]]],"^T",null,"^R",["^H",[null,null]],"^C",1,"^B",64,"^D",64,"^P",1,"^U",true,"^G",["^H",["^I",["^H",[[["^1=","~$&","^1>","^1?","^1@"]]]]]]],"~$pre-condition-met?",["^ ","^?",null,"^@",["^ ","^A","/Users/derektaylor/Documents/projects/sg-app/target/cljsbuild/public/js/out/bouncer/core.cljs","^B",82,"^C",8,"^D",82,"^E",26,"^F",true,"^G",["^H",["^I",["^H",[["~$pre-fn","~$map"]]]]]],"^F",true,"^5","~$bouncer.core/pre-condition-met?","^O",false,"^A","target/cljsbuild/public/js/out/bouncer/core.cljs","^E",26,"^Q",["^H",[["^1D","^1E"]]],"^T",null,"^R",["^H",[null,null]],"^C",1,"^B",82,"^D",82,"^P",2,"^U",true,"^G",["^H",["^I",["^H",[["^1D","^1E"]]]]]],"~$merge-path",["^ ","^?",null,"^@",["^ ","^A","/Users/derektaylor/Documents/projects/sg-app/target/cljsbuild/public/js/out/bouncer/core.cljs","^B",40,"^C",8,"^D",40,"^E",18,"^F",true,"^G",["^H",["^I",["^H",[["~$parent-key","~$validations-map"]]]]],"^M","Takes two arguments:\n\n  `parent-keyword` is a :keyword - or a vector of :keywords denoting a path in a associative structure\n\n  `validations-map` is a map of forms following this spec:\n\n\n      {:keyword [f g] :another-keyword h}\n\n\n  Merges `:parent-keyword` with every first element of validations-map, transforming it into:\n\n\n      ([:parent-keyword :keyword] [f g] [:parent-keyword :another-keyword] h)\n"],"^F",true,"^5","~$bouncer.core/merge-path","^O",false,"^A","target/cljsbuild/public/js/out/bouncer/core.cljs","^E",18,"^Q",["^H",[["^1H","^1I"]]],"^T",null,"^R",["^H",[null,null]],"^C",1,"^B",40,"^D",40,"^P",2,"^U",true,"^G",["^H",["^I",["^H",[["^1H","^1I"]]]]],"^M","Takes two arguments:\n\n  `parent-keyword` is a :keyword - or a vector of :keywords denoting a path in a associative structure\n\n  `validations-map` is a map of forms following this spec:\n\n\n      {:keyword [f g] :another-keyword h}\n\n\n  Merges `:parent-keyword` with every first element of validations-map, transforming it into:\n\n\n      ([:parent-keyword :keyword] [f g] [:parent-keyword :another-keyword] h)\n"],"~$with-default-messages",["^ ","^?",null,"^@",["^ ","^A","/Users/derektaylor/Documents/projects/sg-app/target/cljsbuild/public/js/out/bouncer/core.cljs","^B",165,"^C",7,"^D",165,"^E",28,"^G",["^H",["^I",["^H",[["~$error"]]]]],"^M","Use together with `validate`, e.g.:\n\n\n      (core/validate core/with-default-messages {}\n                     :name v/required)"],"^5","~$bouncer.core/with-default-messages","^O",false,"^A","target/cljsbuild/public/js/out/bouncer/core.cljs","^E",28,"^Q",["^H",[["^1L"]]],"^T",null,"^R",["^H",[null,null]],"^C",1,"^B",165,"^D",165,"^P",1,"^U",true,"^G",["^H",["^I",["^H",[["^1L"]]]]],"^M","Use together with `validate`, e.g.:\n\n\n      (core/validate core/with-default-messages {}\n                     :name v/required)"]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:args","~:path","~:pre","~:else","~:value","~:bouncer.core/errors","~:optional","~:metadata","~:default-message-format","~:message"]],"~:order",["^1T","^1V","^1W","^1Y","^1Z","^1S","^1R","^1U","^1Q","^1X"]],"^M","The `core` namespace provides the two main entry point functions in bouncer:\n\n  - `validate`\n  - `valid?`\n\n\nAll other functions are meant for internal use only and shouldn't be relied upon.\n\nThe project [README](https://github.com/leonardoborges/bouncer/blob/master/README.md) should get you started,\nit's pretty comprehensive.\n\n\nIf you'd like to know more about the motivation behind `bouncer`, check the\n[announcement post](http://www.leonardoborges.com/writings/2013/01/04/bouncer-validation-lib-for-clojure/)."]